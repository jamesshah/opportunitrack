services:
    redis:
        image: "redis:alpine"
        command: redis-server
        container_name: redis
        ports:
            - "6379"
        networks:
            - ot-network

    nginx:
        image: nginx:alpine
        ports:
            - 80:80
            - 443:443
        profiles:
            - production
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./certbot/conf:/etc/letsencrypt # Optional in development
            - ./certbot/www:/var/www/certbot # Optional in development
        restart: unless-stopped
        env_file:
            - .env
        environment:
            - APP_DOMAIN=${APP_DOMAIN}
            - NODE_ENV=${NODE_ENV}
        networks:
            - ot-network

    certbot:
        image: certbot/certbot
        profiles:
            - production
        volumes:
            - ./certbot/conf:/etc/letsencrypt
            - ./certbot/www:/var/www/certbot
        # To generate new
        # command: certonly --webroot -w /var/www/certbot -d ${APP_DOMAIN} --email ${ADMIN_EMAIL} --agree-tos
        # Change the command to handle renewals
        command: renew
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

        env_file:
            - .env
        environment:
            - APP_DOMAIN=${APP_DOMAIN}
            - ADMIN_EMAIL=${ADMIN_EMAIL}
        networks:
            - ot-network

    server:
        build:
            context: server
            dockerfile: Dockerfile
        container_name: server
        ports:
            - "8000:8000"
        environment:
            - NODE_ENV=${NODE_ENV}
            - REDIS_HOST=redis # Use the service name 'redis' to connect
            - REDIS_PORT=6379
        env_file:
            - server/.env
            - .env
        depends_on:
            redis:
                condition: service_started
            completion-queue:
                condition: service_started
            ml-engine:
                condition: service_started
        networks:
            - ot-network

    completion-queue:
        build:
            context: completion-queue-handler
            dockerfile: Dockerfile
        container_name: completion-queue
        environment:
            - NODE_ENV=production
            - REDIS_HOST=redis # Use the service name 'redis' to connect
            - REDIS_PORT=6379
        env_file:
            - completion-queue-handler/.env
        depends_on:
            redis:
                condition: service_started
        networks:
            - ot-network

    ml-engine:
        build:
            context: ml
            dockerfile: Dockerfile
        container_name: ml-engine
        command: python worker.py
        environment:
            - REDIS_HOST=redis # Use the service name 'redis' to connect
            - REDIS_PORT=6379
        env_file:
            - ml/.env
        depends_on:
            redis:
                condition: service_started
        networks:
            - ot-network

networks:
    ot-network:
        driver: bridge
